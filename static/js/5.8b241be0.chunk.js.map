{"version":3,"sources":["components/DigitRecogonizer/index.js"],"names":["DigitRecogonizer","ref","useRef","useState","output","setOuput","saveImage","file","dataURI","type","byteString","atob","split","ab","ArrayBuffer","length","ia","Uint8Array","i","charCodeAt","Blob","dataURItoBlob","document","getElementsByTagName","toDataURL","a","createElement","body","appendChild","style","href","URL","createObjectURL","download","Date","getSeconds","click","current","clear","getResult","formData","FormData","append","axios","method","url","data","headers","then","res","className","height","name","id","class","role","onClick","width","brushColor","brushRadius","canvasWidth","canvasHeight","onChange","e","catenaryColor","fontSize"],"mappings":"kLA6GeA,UAxGU,WACvB,IAAMC,EAAMC,mBADiB,EAEFC,mBAAS,KAFP,mBAEtBC,EAFsB,KAEdC,EAFc,KAuB7B,IAAMC,EAAY,WAChB,IAEIC,EAtBN,SAAuBC,EAASC,GAU9B,IARA,IAAIC,EAAaC,KAAKH,EAAQI,MAAM,KAAK,IAMrCC,GAHaL,EAAQI,MAAM,KAAK,GAAGA,MAAM,KAAK,GAAGA,MAAM,KAAK,GAGvD,IAAIE,YAAYJ,EAAWK,SAChCC,EAAK,IAAIC,WAAWJ,GACfK,EAAI,EAAGA,EAAIR,EAAWK,OAAQG,IACrCF,EAAGE,GAAKR,EAAWS,WAAWD,GAKhC,OADS,IAAIE,KAAK,CAACP,GAAK,CAAEJ,KAAMA,IAOrBY,CAFEC,SAASC,qBAAqB,UAAU,GAChCC,UAAU,YAAa,IACV,aAE9BC,EAAIH,SAASI,cAAc,KAC/BJ,SAASK,KAAKC,YAAYH,GAC1BA,EAAEI,MAAQ,gBACVJ,EAAEK,KAAOC,IAAIC,gBAAgBzB,GAC7BkB,EAAEQ,SAAF,gBAAqB,IAAIC,MAAOC,aAAhC,QACAV,EAAEW,QAEFnC,EAAIoC,QAAQC,QAEZC,EAAUhC,IAGNgC,EAAY,SAAChC,GACjB,IAAIiC,EAAW,IAAIC,SACnBD,EAASE,OAAO,OAAQnC,GAExBoC,IAAM,CACJC,OAAQ,OACRC,IAAK,mDACLC,KAAMN,EACNO,QAAS,CACP,eAAgB,yBAEjBC,MAAK,SAACC,GACHA,EAAIH,KAAK1C,OACXC,EAAS4C,EAAIH,KAAK1C,QAElBC,EAAS,QAIf,OACE,yBAAK6C,UAAU,mBACb,yBAAKA,UAAU,MAAMrB,MAAO,CAAEsB,OAAQ,SACpC,yBAAKD,UAAU,mBACb,uBAAGA,UAAU,OAAb,oBACA,4BACEE,KAAK,GACLC,GAAG,GACHC,MAAM,kBACNC,KAAK,SACLC,QAAS,WACPnD,EAAS,MANb,SAYY,KAAXD,EACC,kBAAC,IAAD,MACG,gBAAG+C,EAAH,EAAGA,OAAQM,EAAX,EAAWA,MAAX,OACC,kBAAC,IAAD,CACExD,IAAKA,EACLoD,GAAG,MACHK,WAAY,UACZC,YAAa,GACbC,YAAaH,EACbI,aAAcV,EACdW,SAAU,SAACC,GACTzD,KAEF0D,cAAe,eAKrB,wBAAId,UAAU,OAAOrB,MAAO,CAAEoC,SAAU,UACrC7D","file":"static/js/5.8b241be0.chunk.js","sourcesContent":["import React, { useRef, useState } from \"react\";\r\nimport CanvasDraw from \"react-canvas-draw\";\r\nimport axios from \"axios\";\r\nimport { AutoSizer } from \"react-virtualized\";\r\n\r\nconst DigitRecogonizer = () => {\r\n  const ref = useRef();\r\n  const [output, setOuput] = useState(\"3\");\r\n\r\n  function dataURItoBlob(dataURI, type) {\r\n    // convert base64 to raw binary data held in a string\r\n    var byteString = atob(dataURI.split(\",\")[1]);\r\n\r\n    // separate out the mime component\r\n    var mimeString = dataURI.split(\",\")[0].split(\":\")[1].split(\";\")[0];\r\n\r\n    // write the bytes of the string to an ArrayBuffer\r\n    var ab = new ArrayBuffer(byteString.length);\r\n    var ia = new Uint8Array(ab);\r\n    for (var i = 0; i < byteString.length; i++) {\r\n      ia[i] = byteString.charCodeAt(i);\r\n    }\r\n\r\n    // write the ArrayBuffer to a blob, and you're done\r\n    var bb = new Blob([ab], { type: type });\r\n    return bb;\r\n  }\r\n\r\n  const saveImage = () => {\r\n    let canvas = document.getElementsByTagName(\"canvas\")[1];\r\n    let img_b64 = canvas.toDataURL(\"image/png\", 0.1);\r\n    let file = dataURItoBlob(img_b64, \"image/png\");\r\n\r\n    var a = document.createElement(\"a\");\r\n    document.body.appendChild(a);\r\n    a.style = \"display: none\";\r\n    a.href = URL.createObjectURL(file);\r\n    a.download = `image${new Date().getSeconds()}.png`;\r\n    a.click();\r\n\r\n    ref.current.clear();\r\n\r\n    getResult(file);\r\n  };\r\n\r\n  const getResult = (file) => {\r\n    var formData = new FormData();\r\n    formData.append(\"file\", file);\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: \"http://asaravanan248.pythonanywhere.com/uploader\",\r\n      data: formData,\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n      },\r\n    }).then((res) => {\r\n      if (res.data.output) {\r\n        setOuput(res.data.output);\r\n      } else {\r\n        setOuput(\"\");\r\n      }\r\n    });\r\n  };\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <div className=\"row\" style={{ height: \"80vh\" }}>\r\n        <div className=\"col text-center\">\r\n          <p className=\"p-2\">DigitRecogonizer</p>\r\n          <button\r\n            name=\"\"\r\n            id=\"\"\r\n            class=\"btn btn-primary\"\r\n            role=\"button\"\r\n            onClick={() => {\r\n              setOuput(\"\");\r\n            }}\r\n          >\r\n            Clear\r\n          </button>\r\n\r\n          {output === \"\" ? (\r\n            <AutoSizer>\r\n              {({ height, width }) => (\r\n                <CanvasDraw\r\n                  ref={ref}\r\n                  id=\"ddd\"\r\n                  brushColor={\"#333333\"}\r\n                  brushRadius={12}\r\n                  canvasWidth={width}\r\n                  canvasHeight={height}\r\n                  onChange={(e) => {\r\n                    saveImage(e);\r\n                  }}\r\n                  catenaryColor={\"#0a0302\"}\r\n                />\r\n              )}\r\n            </AutoSizer>\r\n          ) : (\r\n            <h1 className=\"mt-5\" style={{ fontSize: \"20rem\" }}>\r\n              {output}\r\n            </h1>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DigitRecogonizer;\r\n"],"sourceRoot":""}