{"version":3,"sources":["components/DigitRecogonizer/index.js"],"names":["DigitRecogonizer","ref","useRef","useState","output","setOuput","loading","setLoading","saveImage","file","dataURI","type","byteString","atob","split","ab","ArrayBuffer","length","ia","Uint8Array","i","charCodeAt","Blob","dataURItoBlob","document","getElementsByTagName","toDataURL","current","clear","getResult","form","FormData","append","axios","method","url","data","headers","then","res","className","style","height","name","id","class","role","onClick","width","brushColor","brushRadius","canvasWidth","canvasHeight","onChange","e","catenaryColor","fontSize"],"mappings":"kLAgHeA,UA3GU,WACvB,IAAMC,EAAMC,mBADiB,EAEFC,mBAAS,IAFP,mBAEtBC,EAFsB,KAEdC,EAFc,OAGCF,oBAAS,GAHV,mBAGtBG,EAHsB,KAGbC,EAHa,KAwB7B,IAAMC,EAAY,WAChB,IAEIC,EAtBN,SAAuBC,EAASC,GAU9B,IARA,IAAIC,EAAaC,KAAKH,EAAQI,MAAM,KAAK,IAMrCC,GAHaL,EAAQI,MAAM,KAAK,GAAGA,MAAM,KAAK,GAAGA,MAAM,KAAK,GAGvD,IAAIE,YAAYJ,EAAWK,SAChCC,EAAK,IAAIC,WAAWJ,GACfK,EAAI,EAAGA,EAAIR,EAAWK,OAAQG,IACrCF,EAAGE,GAAKR,EAAWS,WAAWD,GAKhC,OADS,IAAIE,KAAK,CAACP,GAAK,CAAEJ,KAAMA,IAOrBY,CAFEC,SAASC,qBAAqB,UAAU,GAChCC,UAAU,YAAa,IACV,aASlCzB,EAAI0B,QAAQC,QAEZC,EAAUpB,IAGNoB,EAAY,SAACpB,GACjB,IAAIqB,EAAO,IAAIC,SACfD,EAAKE,OAAO,OAAQvB,GACpBF,GAAW,GACX0B,IAAM,CACJC,OAAQ,OACRC,IAAK,gCACLC,KAAMN,EACNO,QAAS,CACP,eAAgB,yBAEjBC,MAAK,SAACC,GACPhC,GAAW,GAEPgC,EAAIH,KAAKhC,OACXC,EAASkC,EAAIH,KAAKhC,QAElBC,EAAS,QAIf,OACE,yBAAKmC,UAAU,mBACb,yBAAKA,UAAU,MAAMC,MAAO,CAAEC,OAAQ,SACpC,yBAAKF,UAAU,mBACb,uBAAGA,UAAU,OAAb,oBACA,4BACEG,KAAK,GACLC,GAAG,GACHC,MAAM,kBACNC,KAAK,SACLC,QAAS,WACP1C,EAAS,MAGVC,EAAU,UAAY,SAGb,KAAXF,EACC,kBAAC,IAAD,MACG,gBAAGsC,EAAH,EAAGA,OAAQM,EAAX,EAAWA,MAAX,OACC,kBAAC,IAAD,CACE/C,IAAKA,EACL2C,GAAG,MACHK,WAAY,UACZC,YAAa,GACbC,YAAaH,EACbI,aAAcV,EACdW,SAAU,SAACC,GACT9C,KAEF+C,cAAe,eAKrB,wBAAIf,UAAU,OAAOC,MAAO,CAAEe,SAAU,UACrCpD","file":"static/js/5.ea45e266.chunk.js","sourcesContent":["import React, { useRef, useState } from \"react\";\r\nimport CanvasDraw from \"react-canvas-draw\";\r\nimport axios from \"axios\";\r\nimport { AutoSizer } from \"react-virtualized\";\r\n\r\nconst DigitRecogonizer = () => {\r\n  const ref = useRef();\r\n  const [output, setOuput] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  function dataURItoBlob(dataURI, type) {\r\n    // convert base64 to raw binary data held in a string\r\n    var byteString = atob(dataURI.split(\",\")[1]);\r\n\r\n    // separate out the mime component\r\n    var mimeString = dataURI.split(\",\")[0].split(\":\")[1].split(\";\")[0];\r\n\r\n    // write the bytes of the string to an ArrayBuffer\r\n    var ab = new ArrayBuffer(byteString.length);\r\n    var ia = new Uint8Array(ab);\r\n    for (var i = 0; i < byteString.length; i++) {\r\n      ia[i] = byteString.charCodeAt(i);\r\n    }\r\n\r\n    // write the ArrayBuffer to a blob, and you're done\r\n    var bb = new Blob([ab], { type: type });\r\n    return bb;\r\n  }\r\n\r\n  const saveImage = () => {\r\n    let canvas = document.getElementsByTagName(\"canvas\")[1];\r\n    let img_b64 = canvas.toDataURL(\"image/png\", 0.1);\r\n    let file = dataURItoBlob(img_b64, \"image/png\");\r\n\r\n    // var a = document.createElement(\"a\");\r\n    // document.body.appendChild(a);\r\n    // a.style = \"display: none\";\r\n    // a.href = URL.createObjectURL(file);\r\n    // a.download = `image${new Date().getSeconds()}.png`;\r\n    // a.click();\r\n\r\n    ref.current.clear();\r\n\r\n    getResult(file);\r\n  };\r\n\r\n  const getResult = (file) => {\r\n    var form = new FormData();\r\n    form.append(\"file\", file);\r\n    setLoading(true);\r\n    axios({\r\n      method: \"POST\",\r\n      url: \"http://3.128.196.174/uploader\",\r\n      data: form,\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n      },\r\n    }).then((res) => {\r\n      setLoading(false);\r\n\r\n      if (res.data.output) {\r\n        setOuput(res.data.output);\r\n      } else {\r\n        setOuput(\"\");\r\n      }\r\n    });\r\n  };\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <div className=\"row\" style={{ height: \"80vh\" }}>\r\n        <div className=\"col text-center\">\r\n          <p className=\"p-2\">DigitRecogonizer</p>\r\n          <button\r\n            name=\"\"\r\n            id=\"\"\r\n            class=\"btn btn-primary\"\r\n            role=\"button\"\r\n            onClick={() => {\r\n              setOuput(\"\");\r\n            }}\r\n          >\r\n            {loading ? \"loading\" : \"Clear\"}\r\n          </button>\r\n\r\n          {output === \"\" ? (\r\n            <AutoSizer>\r\n              {({ height, width }) => (\r\n                <CanvasDraw\r\n                  ref={ref}\r\n                  id=\"ddd\"\r\n                  brushColor={\"#333333\"}\r\n                  brushRadius={12}\r\n                  canvasWidth={width}\r\n                  canvasHeight={height}\r\n                  onChange={(e) => {\r\n                    saveImage(e);\r\n                  }}\r\n                  catenaryColor={\"#0a0302\"}\r\n                />\r\n              )}\r\n            </AutoSizer>\r\n          ) : (\r\n            <h1 className=\"mt-5\" style={{ fontSize: \"20rem\" }}>\r\n              {output}\r\n            </h1>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DigitRecogonizer;\r\n"],"sourceRoot":""}